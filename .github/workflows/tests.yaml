name: Tests

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - '**'


env:
  BEE_VERSION: '0.5.3'
  REPLICA: 5
  BEE_API_URL: 'http://bee-0.localhost'
  BEE_PEER_API_URL: 'http://bee-1.localhost'
  BEE_TEST_CHEQUEBOOK: true

jobs:
  nodejs:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 15.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # Setup Bee environment
      - name: Install bee-local
        run: |
          sudo mv $(command -v brew){,_disable}
          export URL=$(curl -s https://api.github.com/repos/ethersphere/bee-local/releases/latest | jq -r .tarball_url)
          curl -Ls ${URL} -o bee-local.tar.gz
          tar --strip-components=1 --wildcards -xzf bee-local.tar.gz ethersphere-bee-local-*/{beeinfra.sh,helm-values,hack}
          sed -i 's/IMAGE_TAG="latest"/IMAGE_TAG='\"${BEE_VERSION}\"'/' beeinfra.sh
      - name: Install latest beekeeper
        run: |
          export TAG=$(curl -s https://api.github.com/repos/ethersphere/beekeeper/releases/latest | jq -r .tag_name)
          curl -Ls https://github.com/ethersphere/beekeeper/releases/download/${TAG}/beekeeper-linux-amd64 -o beekeeper
          chmod +x beekeeper
      - name: Prepare testing cluster
        run: ./beeinfra.sh prepare --geth
      - name: Set kube config
        run: |
          mkdir -p ~/.kube
          cp $(k3d get-kubeconfig --name='k3s-default') ~/.kube/config
      - name: Set testing cluster
        run: |
          echo -e "127.0.0.10\tregistry.localhost" | sudo tee -a /etc/hosts
          for ((i=0; i<REPLICA; i++)); do echo -e "127.0.1.$((i+1))\tbee-${i}.localhost bee-${i}-debug.localhost"; done | sudo tee -a /etc/hosts
          ./beeinfra.sh install -r "${REPLICA}" --geth

      ## Try getting the node modules from cache, if failed npm ci
      - uses: actions/cache@v2
        id: cache-npm
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-${{ matrix.node }}-${{ env.cache-name }}-
            ${{ runner.OS }}-node-${{ matrix.node }}-

      - name: Install npm deps
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run nodejs tests
        run: npm run test:node

      - name: Debug workflow if failed
        if: failure()
        run: |
          KEYS=$(curl -sSf -X POST https://relay.tunshell.com/api/sessions)
          curl -sSf -X POST -H "Content-Type: application/json" -d "{\"text\": \"**Bee JS**\nDebug -> \`sh <(curl -sSf https://lets.tunshell.com/init.sh) L $(echo $KEYS | jq -r .peer2_key) \${TUNSHELL_SECRET} relay.tunshell.com\`\"}" https://beehive.ethswarm.org/hooks/${{ secrets.WEBHOOK_KEY }}
          echo "Connect to github actions node using"
          echo "sh <(curl -sSf https://lets.tunshell.com/init.sh) L $(echo $KEYS | jq -r .peer2_key) \${TUNSHELL_SECRET} relay.tunshell.com"
          curl -sSf https://lets.tunshell.com/init.sh | sh /dev/stdin T $(echo $KEYS | jq -r .peer1_key) ${{ secrets.TUNSHELL_SECRET }} relay.tunshell.com

  browser:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      # Setup Bee environment
      - name: Install bee-local
        run: |
          sudo mv $(command -v brew){,_disable}
          export URL=$(curl -s https://api.github.com/repos/ethersphere/bee-local/releases/latest | jq -r .tarball_url)
          curl -Ls ${URL} -o bee-local.tar.gz
          tar --strip-components=1 --wildcards -xzf bee-local.tar.gz ethersphere-bee-local-*/{beeinfra.sh,helm-values,hack}
          sed -i 's/IMAGE_TAG="latest"/IMAGE_TAG='\"${BEE_VERSION}\"'/' beeinfra.sh
      - name: Install latest beekeeper
        run: |
          export TAG=$(curl -s https://api.github.com/repos/ethersphere/beekeeper/releases/latest | jq -r .tag_name)
          curl -Ls https://github.com/ethersphere/beekeeper/releases/download/${TAG}/beekeeper-linux-amd64 -o beekeeper
          chmod +x beekeeper
      - name: Prepare testing cluster
        run: ./beeinfra.sh prepare --geth
      - name: Set kube config
        run: |
          mkdir -p ~/.kube
          cp $(k3d get-kubeconfig --name='k3s-default') ~/.kube/config
      - name: Set testing cluster
        run: |
          echo -e "127.0.0.10\tregistry.localhost" | sudo tee -a /etc/hosts
          for ((i=0; i<REPLICA; i++)); do echo -e "127.0.1.$((i+1))\tbee-${i}.localhost bee-${i}-debug.localhost"; done | sudo tee -a /etc/hosts
          ./beeinfra.sh install -r "${REPLICA}" --geth

      ## Try getting the node modules from cache, if failed npm ci
      - uses: actions/cache@v2
        id: cache-npm
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-${{ matrix.node }}-${{ env.cache-name }}-
            ${{ runner.OS }}-node-${{ matrix.node }}-

      - name: Install npm deps
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run browser tests
        run: npm run test:browser

      - name: Debug workflow if failed
        if: failure()
        run: |
          KEYS=$(curl -sSf -X POST https://relay.tunshell.com/api/sessions)
          curl -sSf -X POST -H "Content-Type: application/json" -d "{\"text\": \"**Bee JS**\nDebug -> \`sh <(curl -sSf https://lets.tunshell.com/init.sh) L $(echo $KEYS | jq -r .peer2_key) \${TUNSHELL_SECRET} relay.tunshell.com\`\"}" https://beehive.ethswarm.org/hooks/${{ secrets.WEBHOOK_KEY }}
          echo "Connect to github actions node using"
          echo "sh <(curl -sSf https://lets.tunshell.com/init.sh) L $(echo $KEYS | jq -r .peer2_key) \${TUNSHELL_SECRET} relay.tunshell.com"
          curl -sSf https://lets.tunshell.com/init.sh | sh /dev/stdin T $(echo $KEYS | jq -r .peer1_key) ${{ secrets.TUNSHELL_SECRET }} relay.tunshell.com

