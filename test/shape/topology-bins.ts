import { Types } from 'cafe-utility'
import { topologyBinPropertyShape } from './topology-bin-property'

export const topologyBinsShape = {
  bin_0: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_1: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_2: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_3: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_4: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_5: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_6: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_7: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_8: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_9: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_10: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_11: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_12: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_13: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_14: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_15: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_16: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_17: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_18: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_19: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_20: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_21: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_22: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_23: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_24: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_25: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_26: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_27: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_28: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_29: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_30: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
  bin_31: (x: any) => Types.enforceObjectShape(x, topologyBinPropertyShape),
}
